nJenkins Pipelines
Jenkins Pipelines allow us to write the Jenkins build steps in code.
1) Build Steps allow us to write build (compile), test, deploy in code. Code means you put this code in version control.

Developer --> Build --> Test --> Release --> Provision/Deploy --> Customer

The pipeline is a specific job type and it can be created though Jenkins UI or the Jenkins DSL.
Jenkins DSL - declarative pipeline.
Groovy - scripted pipeline. Grooy is a scripting lang for the Java Platform, very similar to Java syntatically and runs in the JVM machine.

Jenkins Pipeline is typically written into a text file - Jenkinsfile - which gets checked into a project's source repo.

More info:  https://www.jenkins.io/doc/book/pipeline/ 

Node - decides on what jenkins worker node the job will be ran. 
def: to declare variables
Stage: defines a building stage - build, test, or deploy

node {
      def mvnMain
      
      stage('Prep') {
            git 'repo url'
      } 
      stage('Build') {
      //Run the maven build
        if (isUnix()) {
              condition 
        } else {
              condition2 
        }
       }
       stage('Results') {
          junit 'path.xml'
          archive 'target/*.jar'
       }
 }
 
 JENKINS SLAVES (Advanced) 
Normally, only one node can host the jenkins web UI and do all the builds.
In Prod env, we typically want to host the Jenkins web UI on a small master node, and have one or more worker nodes called Jenkins Slaves.
- Using worker nodes expands your buld capacity, bc one worker has one or more build executors (building slots).
If Jenkins has 2 executors, those 2 executors will run paralelly, the rest will get queued up.

Static worker scaling.
During the working hours we can scale up and in the evening scale down to save some cost.

Dynamic worker scaling: 
The Amazon EC2 Plugin- it will start new nodes auto using the AWS EC2 API and is after some time the nodes are idle, the'll get killed automatically.
DOCKER Plugin - this plugin uses a docker host to spin up a slave container, run a jenkins build in it, and tear it down.
Amazon ECS Plugin - Same as docker plugin, but the host is now a docker orchestrator, the EC2 Container Engine, which can host the docket containers and scale out when necessary.
DigitalOcean Plugin - dynamically provisions droplets(nodes) to be used as Jenkins slaves.


Creating new Jenkin Slave: login to Jenkins -> Manage Jenkins --> Manage Nodes  --> New Node
Two way to create Jenkin Slaves: 
1. Through SSH    2.Through jnlp. Can be done via Jenkins UI (click Launch btn) or via running a command line 'java -jar slave.jar -jnlpUrl [put here url] -secret [put secret]
Fist make sure that Java is installed on your machine.

Blue Ocean - A new Jenkins UI and provided as a plugin. It's compatible with freestyle project(projects that was build without using pipelines).

SSH-agents. SSH-agent will run on the master, and will contain the private keys that are necessary to authenticate to the external systems you need acces to. 
SSH-agent uses the same keys stored in your credentials.




 
        
        
      


